import React, { useState, useEffect } from 'react';
import { getAllUsers, createUser, deleteUser } from '../services/userService';
import './UserList.css'

function UserList() {
    // State management for users list and new user form
    const [users, setUsers] = useState([]); // ‡§Ø‡§π‡§æ‡§Ç ‡§π‡§Æ ‡§∏‡§≠‡•Ä users ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ store ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç üòä
    const [newUser, setNewUser] = useState({ name: '', email: '' }); // ‡§®‡§è user ‡§ï‡•á ‡§≤‡§ø‡§è form data üìù

    // Component mount ‡§™‡§∞ users fetch ‡§ï‡§∞‡§®‡§æ
    useEffect(() => {
        fetchUsers(); // ‡§ú‡•à‡§∏‡•á ‡§π‡•Ä page load ‡§π‡•ã‡§ó‡§æ, ‡§∏‡§æ‡§∞‡•á users fetch ‡§π‡•ã ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á! üöÄ
    }, []);

    // API ‡§∏‡•á users data fetch ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ function
    const fetchUsers = async () => {
        try {
            const fetchedUsers = await getAllUsers(); // API call to get all users
            setUsers(fetchedUsers); // ‡§Æ‡§ø‡§≤‡•á ‡§π‡•Å‡§è users ‡§ï‡•ã state ‡§Æ‡•á‡§Ç update ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç üíØ
        } catch (error) {
            console.error('Error fetching users:', error); // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à error ‡§Ü‡§è ‡§§‡•ã console ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡§ó‡•á üò±
        }
    };

    // ‡§®‡§Ø‡§æ user create ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ handler
    const handleCreateUser = async (e) => {
        e.preventDefault(); // form submission ‡§ï‡§æ default behavior prevent ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
        try {
            const createdUser = await createUser(newUser); // API call ‡§ï‡§∞‡§ï‡•á ‡§®‡§Ø‡§æ user create ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç üöÄ
            setUsers([...users, createdUser]); // ‡§™‡•Å‡§∞‡§æ‡§®‡•á users ‡§Æ‡•á‡§Ç ‡§®‡§Ø‡§æ user add ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‚úÖ
            setNewUser({ name: '', email: '' }); // form fields ‡§ï‡•ã reset ‡§ï‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§®‡§Ø‡§æ user add ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç üîÑ
        } catch (error) {
            console.error('Error creating user:', error); // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à error ‡§Ü‡§è ‡§§‡•ã console ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡§ó‡•á üò±
        }
    };

    // User delete ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ handler function
    const handleDeleteUser = async (id) => {
        try {
            await deleteUser(id); // API call ‡§ï‡§∞‡§ï‡•á user ‡§ï‡•ã delete ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‚ùå
            // Filter method ‡§∏‡•á deleted user ‡§ï‡•ã remove ‡§ï‡§∞‡§ï‡•á users state ‡§ï‡•ã update ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç üóëÔ∏è
            setUsers(users.filter(user => user.id !== id));
            // Success message ‡§ï‡•ã console ‡§Æ‡•á‡§Ç log ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‚úÖ
            console.log(`User with ID ${id} successfully deleted`);
        } catch (error) {
            console.error('Error deleting user:', error); // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à error ‡§Ü‡§è ‡§§‡•ã console ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡§ó‡•á üò±
            // User ‡§ï‡•ã error ‡§ï‡§æ notification ‡§¶‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (future enhancement) üîî
        }
    };

    return (
        <div className="user-management-container">
            <h2 className="user-management-title">User Management</h2>
            <form onSubmit={handleCreateUser} className="user-form">
                <div className="form-group">
                    <input
                        type="text"
                        placeholder="Name"
                        value={newUser.name}
                        onChange={(e) => setNewUser({...newUser, name: e.target.value})}
                        required
                        className="form-input"
                    />
                    <input
                        type="email"
                        placeholder="Email"
                        value={newUser.email}
                        onChange={(e) => setNewUser({...newUser, email: e.target.value})}
                        required
                        className="form-input"
                    />
                    <button type="submit" className="add-button">Add User</button>
                </div>
            </form>
            <div className="table-container">
                <table className="user-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {users.map(user => (
                            <tr key={user.id}>
                                <td>{user.id}</td>
                                <td>{user.name}</td>
                                <td>{user.email}</td>
                                <td>
                                    <button 
                                        onClick={() => handleDeleteUser(user.id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default UserList;
